<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sudoku Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        .cell {
            aspect-ratio: 1/1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
        }
        .cell:hover {
            background-color: #d1fae5 !important;
        }
        .cell.fixed {
            background-color: #e5e7eb;
        }
        .cell.selected {
            background-color: #bbf7d0 !important;
        }
        .cell.highlighted {
            background-color: #d1fae5;
        }
        .cell.error {
            color: #ef4444;
        }
        .cell.notes {
            font-size: 0.6rem;
            color: #6b7280;
        }
        .number-btn.selected {
            background-color: #bbf7d0;
        }
        .thick-right {
            border-right-width: 2px;
        }
        .thick-bottom {
            border-bottom-width: 2px;
        }
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-4px); }
            40%, 80% { transform: translateX(4px); }
        }
        .shake {
            animation: shake 0.4s;
        }
    </style>
</head>
<body class="bg-green-100 flex flex-col items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-md">
        <div class="flex justify-between items-center mb-4">
            <i class="fas fa-arrow-left text-xl cursor-pointer hover:text-green-600" id="back-btn"></i>
            <span class="text-lg font-semibold" id="level-display">Lv 2</span>
            <div class="flex space-x-2">
                <i class="fas fa-palette text-xl cursor-pointer hover:text-green-600" id="theme-btn"></i>
                <i class="fas fa-cog text-xl cursor-pointer hover:text-green-600" id="settings-btn"></i>
            </div>
        </div>
        <div class="flex justify-between items-center mb-4">
            <span class="text-sm" id="difficulty-display">Easy</span>
            <div class="flex items-center space-x-1" id="mistakes-display">
                <span class="text-sm">Mistakes:</span>
                <span class="text-red-500"><i class="fas fa-heart"></i></span>
                <span class="text-red-500"><i class="fas fa-heart"></i></span>
                <span class="text-red-500"><i class="fas fa-heart"></i></span>
            </div>
            <div class="flex items-center space-x-1" id="timer-display">
                <span class="text-sm">00:00</span>
                <i class="fas fa-pause text-sm cursor-pointer hover:text-green-600" id="pause-btn"></i>
            </div>
        </div>
        
        <div class="grid grid-cols-9 gap-0 border-2 border-black bg-black" id="sudoku-grid">
            <!-- Sudoku grid cells will be generated by JavaScript -->
        </div>
        
        <div class="flex justify-around mt-4">
            <div class="flex flex-col items-center cursor-pointer hover:text-green-600" id="undo-btn">
                <i class="fas fa-undo-alt text-xl"></i>
                <span class="text-xs">Undo</span>
            </div>
            <div class="flex flex-col items-center cursor-pointer hover:text-green-600" id="erase-btn">
                <i class="fas fa-eraser text-xl"></i>
                <span class="text-xs">Erase</span>
            </div>
            <div class="flex flex-col items-center cursor-pointer hover:text-green-600" id="notes-btn">
                <i class="fas fa-pencil-alt text-xl"></i>
                <span class="text-xs">Notes</span>
                <span class="text-xs" id="notes-status">OFF</span>
            </div>
            <div class="flex flex-col items-center cursor-pointer hover:text-green-600" id="auto-notes-btn">
                <i class="fas fa-sticky-note text-xl"></i>
                <span class="text-xs">Auto Notes</span>
                <span class="text-xs" id="auto-notes-status">1</span>
            </div>
            <div class="flex flex-col items-center cursor-pointer hover:text-green-600" id="hint-btn">
                <i class="fas fa-lightbulb text-xl"></i>
                <span class="text-xs">Hint</span>
                <span class="text-xs" id="hint-count">1</span>
            </div>
        </div>
        
        <div class="grid grid-cols-9 gap-1 mt-4" id="number-buttons">
            <div class="cell cursor-pointer hover:bg-green-200" data-number="1">1</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="2">2</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="3">3</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="4">4</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="5">5</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="6">6</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="7">7</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="8">8</div>
            <div class="cell cursor-pointer hover:bg-green-200" data-number="9">9</div>
        </div>
    </div>

    <!-- Game Over Modal -->
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden" id="game-over-modal">
        <div class="bg-white p-6 rounded-lg max-w-sm w-full text-center">
            <h2 class="text-2xl font-bold mb-4" id="game-over-title">Game Over!</h2>
            <p class="mb-4" id="game-over-message">You've made too many mistakes.</p>
            <div class="flex justify-center space-x-4">
                <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded" id="new-game-btn">New Game</button>
                <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded" id="quit-btn">Quit</button>
            </div>
        </div>
    </div>

    <!-- Win Modal -->
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden" id="win-modal">
        <div class="bg-white p-6 rounded-lg max-w-sm w-full text-center">
            <h2 class="text-2xl font-bold mb-4">Congratulations!</h2>
            <p class="mb-2">You solved the puzzle!</p>
            <p class="mb-4">Time: <span id="win-time">00:00</span></p>
            <div class="flex justify-center space-x-4">
                <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded" id="next-level-btn">Next Level</button>
                <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded" id="win-quit-btn">Quit</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Game state
            const gameState = {
                board: Array(9).fill().map(() => Array(9).fill(0)),
                solution: Array(9).fill().map(() => Array(9).fill(0)),
                fixedCells: Array(9).fill().map(() => Array(9).fill(false)),
                notes: Array(9).fill().map(() => Array(9).fill().map(() => Array(9).fill(false))),
                selectedCell: null,
                notesMode: false,
                autoNotes: true,
                mistakes: 0,
                maxMistakes: 3,
                timer: 0,
                timerInterval: null,
                isPaused: false,
                gameOver: false,
                difficulty: 'easy',
                level: 1,
                hints: 3,
                moveHistory: []
            };

            // DOM elements
            const sudokuGrid = document.getElementById('sudoku-grid');
            const numberButtons = document.getElementById('number-buttons');
            const notesBtn = document.getElementById('notes-btn');
            const notesStatus = document.getElementById('notes-status');
            const autoNotesBtn = document.getElementById('auto-notes-btn');
            const autoNotesStatus = document.getElementById('auto-notes-status');
            const eraseBtn = document.getElementById('erase-btn');
            const undoBtn = document.getElementById('undo-btn');
            const hintBtn = document.getElementById('hint-btn');
            const hintCount = document.getElementById('hint-count');
            const timerDisplay = document.getElementById('timer-display');
            const pauseBtn = document.getElementById('pause-btn');
            const difficultyDisplay = document.getElementById('difficulty-display');
            const levelDisplay = document.getElementById('level-display');
            const mistakesDisplay = document.getElementById('mistakes-display');
            const gameOverModal = document.getElementById('game-over-modal');
            const winModal = document.getElementById('win-modal');
            const winTime = document.getElementById('win-time');
            const gameOverTitle = document.getElementById('game-over-title');
            const gameOverMessage = document.getElementById('game-over-message');

            // Initialize the game
            initGame();

            // Event listeners
            notesBtn.addEventListener('click', toggleNotesMode);
            autoNotesBtn.addEventListener('click', toggleAutoNotes);
            eraseBtn.addEventListener('click', eraseCell);
            undoBtn.addEventListener('click', undoMove);
            hintBtn.addEventListener('click', giveHint);
            pauseBtn.addEventListener('click', togglePause);
            document.getElementById('new-game-btn').addEventListener('click', startNewGame);
            document.getElementById('quit-btn').addEventListener('click', quitGame);
            document.getElementById('next-level-btn').addEventListener('click', nextLevel);
            document.getElementById('win-quit-btn').addEventListener('click', quitGame);
            document.getElementById('back-btn').addEventListener('click', () => alert('Back button clicked'));
            document.getElementById('theme-btn').addEventListener('click', () => alert('Theme button clicked'));
            document.getElementById('settings-btn').addEventListener('click', () => alert('Settings button clicked'));

            // Keyboard support
            document.addEventListener('keydown', handleKeyPress);

            // Initialize the game board
            function initGame() {
                createSudokuGrid();
                generatePuzzle();
                startTimer();
                updateUI();
            }

            // Create the Sudoku grid
            function createSudokuGrid() {
                sudokuGrid.innerHTML = '';
                
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        const cell = document.createElement('div');
                        cell.className = 'cell bg-white border border-gray-300';
                        
                        // Add thick borders for 3x3 blocks
                        if (col === 2 || col === 5) cell.classList.add('thick-right');
                        if (row === 2 || row === 5) cell.classList.add('thick-bottom');
                        
                        cell.dataset.row = row;
                        cell.dataset.col = col;
                        
                        cell.addEventListener('click', () => selectCell(row, col));
                        
                        sudokuGrid.appendChild(cell);
                    }
                }
            }

            // Generate a Sudoku puzzle
            function generatePuzzle() {
                // Reset the board
                gameState.board = Array(9).fill().map(() => Array(9).fill(0));
                gameState.fixedCells = Array(9).fill().map(() => Array(9).fill(false));
                gameState.notes = Array(9).fill().map(() => Array(9).fill().map(() => Array(9).fill(false)));
                gameState.selectedCell = null;
                gameState.mistakes = 0;
                gameState.timer = 0;
                gameState.gameOver = false;
                gameState.moveHistory = [];
                
                // Generate a solved board
                generateSolution(0, 0);
                
                // Copy the solution
                gameState.solution = JSON.parse(JSON.stringify(gameState.board));
                
                // Remove numbers to create the puzzle
                const cellsToRemove = gameState.difficulty === 'easy' ? 40 : 
                                     gameState.difficulty === 'medium' ? 50 : 60;
                
                let removed = 0;
                while (removed < cellsToRemove) {
                    const row = Math.floor(Math.random() * 9);
                    const col = Math.floor(Math.random() * 9);
                    
                    if (gameState.board[row][col] !== 0) {
                        gameState.board[row][col] = 0;
                        removed++;
                    }
                }
                
                // Mark fixed cells (the ones that are filled initially)
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        gameState.fixedCells[row][col] = gameState.board[row][col] !== 0;
                    }
                }
                
                // Update auto notes if enabled
                if (gameState.autoNotes) {
                    updateAllAutoNotes();
                }
                
                updateBoardDisplay();
            }

            // Recursive function to generate a solved Sudoku board
            function generateSolution(row, col) {
                if (row === 9) return true;
                if (col === 9) return generateSolution(row + 1, 0);
                if (gameState.board[row][col] !== 0) return generateSolution(row, col + 1);
                
                const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
                shuffleArray(nums);
                
                for (const num of nums) {
                    if (isValidPlacement(row, col, num)) {
                        gameState.board[row][col] = num;
                        
                        if (generateSolution(row, col + 1)) {
                            return true;
                        }
                        
                        gameState.board[row][col] = 0;
                    }
                }
                
                return false;
            }

            // Shuffle an array
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }

            // Check if a number can be placed in a cell
            function isValidPlacement(row, col, num) {
                // Check row
                for (let c = 0; c < 9; c++) {
                    if (gameState.board[row][c] === num) return false;
                }
                
                // Check column
                for (let r = 0; r < 9; r++) {
                    if (gameState.board[r][col] === num) return false;
                }
                
                // Check 3x3 box
                const boxRow = Math.floor(row / 3) * 3;
                const boxCol = Math.floor(col / 3) * 3;
                
                for (let r = boxRow; r < boxRow + 3; r++) {
                    for (let c = boxCol; c < boxCol + 3; c++) {
                        if (gameState.board[r][c] === num) return false;
                    }
                }
                
                return true;
            }

            // Update the visual representation of the board
            function updateBoardDisplay() {
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        const cellIndex = row * 9 + col;
                        const cell = sudokuGrid.children[cellIndex];
                        
                        // Clear the cell
                        cell.innerHTML = '';
                        cell.className = 'cell bg-white border border-gray-300';
                        
                        // Add thick borders for 3x3 blocks
                        if (col === 2 || col === 5) cell.classList.add('thick-right');
                        if (row === 2 || row === 5) cell.classList.add('thick-bottom');
                        
                        // Mark fixed cells
                        if (gameState.fixedCells[row][col]) {
                            cell.classList.add('fixed');
                        }
                        
                        // Display the number or notes
                        if (gameState.board[row][col] !== 0) {
                            cell.textContent = gameState.board[row][col];
                            
                            // Mark errors
                            if (!gameState.fixedCells[row][col] && gameState.board[row][col] !== gameState.solution[row][col]) {
                                cell.classList.add('error');
                            }
                        } else if (gameState.notes[row][col].some(note => note)) {
                            cell.classList.add('notes');
                            
                            const notesContainer = document.createElement('div');
                            notesContainer.className = 'grid grid-cols-3 gap-0 w-full h-full';
                            
                            for (let noteNum = 1; noteNum <= 9; noteNum++) {
                                const noteCell = document.createElement('div');
                                noteCell.className = 'flex items-center justify-center';
                                
                                if (gameState.notes[row][col][noteNum - 1]) {
                                    noteCell.textContent = noteNum;
                                }
                                
                                notesContainer.appendChild(noteCell);
                            }
                            
                            cell.appendChild(notesContainer);
                        }
                        
                        // Highlight selected cell and related cells
                        if (gameState.selectedCell && gameState.selectedCell.row === row && gameState.selectedCell.col === col) {
                            cell.classList.add('selected');
                        } else if (gameState.selectedCell && 
                                  (gameState.selectedCell.row === row || 
                                   gameState.selectedCell.col === col || 
                                   (Math.floor(gameState.selectedCell.row / 3) === Math.floor(row / 3) && 
                                    Math.floor(gameState.selectedCell.col / 3) === Math.floor(col / 3)))) {
                            cell.classList.add('highlighted');
                        }
                    }
                }
                
                // Highlight selected number buttons
                const selectedNumber = gameState.selectedCell ? gameState.board[gameState.selectedCell.row][gameState.selectedCell.col] : null;
                
                document.querySelectorAll('#number-buttons .cell').forEach(btn => {
                    btn.classList.remove('selected');
                    
                    if (selectedNumber && parseInt(btn.dataset.number) === selectedNumber) {
                        btn.classList.add('selected');
                    }
                });
            }

            // Select a cell
            function selectCell(row, col) {
                if (gameState.gameOver || gameState.isPaused) return;
                
                // Don't allow selecting fixed cells
                if (gameState.fixedCells[row][col]) {
                    return;
                }
                
                gameState.selectedCell = { row, col };
                updateBoardDisplay();
            }

            // Place a number in the selected cell
            function placeNumber(number) {
                if (gameState.gameOver || gameState.isPaused || !gameState.selectedCell) return;
                
                const { row, col } = gameState.selectedCell;
                
                // Don't allow modifying fixed cells
                if (gameState.fixedCells[row][col]) {
                    return;
                }
                
                // If notes mode is on, toggle the note
                if (gameState.notesMode) {
                    toggleNote(row, col, number);
                    return;
                }
                
                // Save the current state for undo
                const prevValue = gameState.board[row][col];
                const prevNotes = JSON.parse(JSON.stringify(gameState.notes[row][col]));
                
                // Place the number
                gameState.board[row][col] = number;
                gameState.notes[row][col] = Array(9).fill(false);
                
                // Check if the placement is correct
                if (number !== gameState.solution[row][col]) {
                    gameState.mistakes++;
                    
                    // Shake animation for wrong move
                    const cellIndex = row * 9 + col;
                    const cell = sudokuGrid.children[cellIndex];
                    cell.classList.add('shake');
                    
                    setTimeout(() => {
                        cell.classList.remove('shake');
                    }, 400);
                    
                    if (gameState.mistakes >= gameState.maxMistakes) {
                        gameOver(false);
                    }
                } else {
                    // Check if the puzzle is solved
                    if (isPuzzleSolved()) {
                        gameOver(true);
                    }
                }
                
                // Add to move history for undo
                gameState.moveHistory.push({
                    row,
                    col,
                    prevValue,
                    prevNotes,
                    newValue: number,
                    wasCorrect: number === gameState.solution[row][col]
                });
                
                // Update auto notes if enabled
                if (gameState.autoNotes) {
                    updateAutoNotes(row, col, number);
                }
                
                updateBoardDisplay();
                updateUI();
            }

            // Toggle a note in a cell
            function toggleNote(row, col, number) {
                gameState.notes[row][col][number - 1] = !gameState.notes[row][col][number - 1];
                
                // Add to move history for undo
                gameState.moveHistory.push({
                    row,
                    col,
                    prevValue: gameState.board[row][col],
                    prevNotes: JSON.parse(JSON.stringify(gameState.notes[row][col])),
                    newValue: gameState.board[row][col],
                    wasNoteChange: true
                });
                
                updateBoardDisplay();
            }

            // Update auto notes for a specific cell after placing a number
            function updateAutoNotes(row, col, number) {
                // Remove the number from notes in the same row, column, and box
                for (let i = 0; i < 9; i++) {
                    // Same row
                    if (gameState.board[row][i] === 0) {
                        gameState.notes[row][i][number - 1] = false;
                    }
                    
                    // Same column
                    if (gameState.board[i][col] === 0) {
                        gameState.notes[i][col][number - 1] = false;
                    }
                }
                
                // Same 3x3 box
                const boxRow = Math.floor(row / 3) * 3;
                const boxCol = Math.floor(col / 3) * 3;
                
                for (let r = boxRow; r < boxRow + 3; r++) {
                    for (let c = boxCol; c < boxCol + 3; c++) {
                        if (gameState.board[r][c] === 0) {
                            gameState.notes[r][c][number - 1] = false;
                        }
                    }
                }
            }

            // Update all auto notes on the board
            function updateAllAutoNotes() {
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        if (gameState.board[row][col] !== 0) {
                            updateAutoNotes(row, col, gameState.board[row][col]);
                        }
                    }
                }
            }

            // Toggle notes mode
            function toggleNotesMode() {
                gameState.notesMode = !gameState.notesMode;
                notesStatus.textContent = gameState.notesMode ? 'ON' : 'OFF';
                notesBtn.classList.toggle('text-green-600', gameState.notesMode);
                updateUI();
            }

            // Toggle auto notes
            function toggleAutoNotes() {
                gameState.autoNotes = !gameState.autoNotes;
                autoNotesStatus.textContent = gameState.autoNotes ? 'ON' : 'OFF';
                autoNotesBtn.classList.toggle('text-green-600', gameState.autoNotes);
                
                if (gameState.autoNotes) {
                    updateAllAutoNotes();
                    updateBoardDisplay();
                }
                
                updateUI();
            }

            // Erase the selected cell
            function eraseCell() {
                if (gameState.gameOver || gameState.isPaused || !gameState.selectedCell) return;
                
                const { row, col } = gameState.selectedCell;
                
                // Don't allow erasing fixed cells
                if (gameState.fixedCells[row][col]) {
                    return;
                }
                
                // Save the current state for undo
                const prevValue = gameState.board[row][col];
                const prevNotes = JSON.parse(JSON.stringify(gameState.notes[row][col]));
                
                // Erase the cell
                gameState.board[row][col] = 0;
                
                // Add to move history for undo
                gameState.moveHistory.push({
                    row,
                    col,
                    prevValue,
                    prevNotes,
                    newValue: 0
                });
                
                updateBoardDisplay();
                updateUI();
            }

            // Undo the last move
            function undoMove() {
                if (gameState.gameOver || gameState.isPaused || gameState.moveHistory.length === 0) return;
                
                const lastMove = gameState.moveHistory.pop();
                const { row, col, prevValue, prevNotes } = lastMove;
                
                // Restore the previous state
                gameState.board[row][col] = prevValue;
                gameState.notes[row][col] = prevNotes;
                
                // If it was a wrong move, decrease mistakes count
                if (lastMove.wasCorrect === false) {
                    gameState.mistakes--;
                }
                
                updateBoardDisplay();
                updateUI();
            }

            // Give a hint
            function giveHint() {
                if (gameState.gameOver || gameState.isPaused || gameState.hints <= 0) return;
                
                // Find an empty cell
                const emptyCells = [];
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        if (gameState.board[row][col] === 0 && !gameState.fixedCells[row][col]) {
                            emptyCells.push({ row, col });
                        }
                    }
                }
                
                if (emptyCells.length === 0) return;
                
                // Select a random empty cell
                const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                
                // Fill in the correct number
                gameState.board[randomCell.row][randomCell.col] = gameState.solution[randomCell.row][randomCell.col];
                gameState.notes[randomCell.row][randomCell.col] = Array(9).fill(false);
                
                // Decrease hint count
                gameState.hints--;
                
                // Add to move history for undo
                gameState.moveHistory.push({
                    row: randomCell.row,
                    col: randomCell.col,
                    prevValue: 0,
                    prevNotes: Array(9).fill(false),
                    newValue: gameState.solution[randomCell.row][randomCell.col],
                    wasHint: true
                });
                
                // Update auto notes if enabled
                if (gameState.autoNotes) {
                    updateAutoNotes(randomCell.row, randomCell.col, gameState.solution[randomCell.row][randomCell.col]);
                }
                
                updateBoardDisplay();
                updateUI();
            }

            // Check if the puzzle is solved
            function isPuzzleSolved() {
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        if (gameState.board[row][col] !== gameState.solution[row][col]) {
                            return false;
                        }
                    }
                }
                return true;
            }

            // Start the game timer
            function startTimer() {
                clearInterval(gameState.timerInterval);
                gameState.timer = 0;
                gameState.timerInterval = setInterval(() => {
                    if (!gameState.isPaused && !gameState.gameOver) {
                        gameState.timer++;
                        updateTimerDisplay();
                    }
                }, 1000);
            }

            // Update the timer display
            function updateTimerDisplay() {
                const minutes = Math.floor(gameState.timer / 60);
                const seconds = gameState.timer % 60;
                timerDisplay.children[0].textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            // Toggle pause
            function togglePause() {
                gameState.isPaused = !gameState.isPaused;
                pauseBtn.classList.toggle('fa-pause');
                pauseBtn.classList.toggle('fa-play');
                updateUI();
            }

            // Game over
            function gameOver(isWin) {
                gameState.gameOver = true;
                clearInterval(gameState.timerInterval);
                
                if (isWin) {
                    winTime.textContent = timerDisplay.children[0].textContent;
                    winModal.classList.remove('hidden');
                } else {
                    gameOverTitle.textContent = 'Game Over!';
                    gameOverMessage.textContent = 'You\'ve made too many mistakes.';
                    gameOverModal.classList.remove('hidden');
                }
            }

            // Start a new game
            function startNewGame() {
                gameOverModal.classList.add('hidden');
                winModal.classList.add('hidden');
                generatePuzzle();
                startTimer();
                updateUI();
            }

            // Move to next level
            function nextLevel() {
                gameState.level++;
                if (gameState.level > 3) {
                    gameState.difficulty = 'medium';
                } else if (gameState.level > 6) {
                    gameState.difficulty = 'hard';
                }
                
                winModal.classList.add('hidden');
                generatePuzzle();
                startTimer();
                updateUI();
            }

            // Quit game
            function quitGame() {
                gameOverModal.classList.add('hidden');
                winModal.classList.add('hidden');
                // In a real app, you might navigate to a different screen
                alert('Thanks for playing!');
            }

            // Update UI elements
            function updateUI() {
                // Update mistakes display
                mistakesDisplay.innerHTML = '<span class="text-sm">Mistakes:</span>';
                for (let i = 0; i < gameState.maxMistakes; i++) {
                    const heart = document.createElement('span');
                    heart.className = i < gameState.maxMistakes - gameState.mistakes ? 'text-red-500' : 'text-gray-400';
                    heart.innerHTML = '<i class="fas fa-heart"></i>';
                    mistakesDisplay.appendChild(heart);
                }
                
                // Update difficulty display
                difficultyDisplay.textContent = gameState.difficulty.charAt(0).toUpperCase() + gameState.difficulty.slice(1);
                
                // Update level display
                levelDisplay.textContent = `Lv ${gameState.level}`;
                
                // Update hint count
                hintCount.textContent = gameState.hints;
                hintBtn.classList.toggle('text-green-600', gameState.hints > 0);
                
                // Update undo button
                undoBtn.classList.toggle('text-green-600', gameState.moveHistory.length > 0);
                
                // Update number buttons
                document.querySelectorAll('#number-buttons .cell').forEach(btn => {
                    const number = parseInt(btn.dataset.number);
                    btn.classList.toggle('opacity-50', !isNumberAvailable(number));
                });
            }

            // Check if a number is still available to be placed (not already in row, column, or box)
            function isNumberAvailable(number) {
                if (!gameState.selectedCell) return true;
                
                const { row, col } = gameState.selectedCell;
                
                // Check if the number is already in the row or column
                for (let i = 0; i < 9; i++) {
                    if (gameState.board[row][i] === number || gameState.board[i][col] === number) {
                        return false;
                    }
                }
                
                // Check if the number is already in the 3x3 box
                const boxRow = Math.floor(row / 3) * 3;
                const boxCol = Math.floor(col / 3) * 3;
                
                for (let r = boxRow; r < boxRow + 3; r++) {
                    for (let c = boxCol; c < boxCol + 3; c++) {
                        if (gameState.board[r][c] === number) {
                            return false;
                        }
                    }
                }
                
                return true;
            }

            // Handle keyboard input
            function handleKeyPress(e) {
                if (gameState.gameOver || gameState.isPaused) return;
                
                // Number keys 1-9
                if (e.key >= '1' && e.key <= '9') {
                    placeNumber(parseInt(e.key));
                }
                
                // Arrow keys for navigation
                if (gameState.selectedCell) {
                    const { row, col } = gameState.selectedCell;
                    
                    switch (e.key) {
                        case 'ArrowUp':
                            if (row > 0) selectCell(row - 1, col);
                            break;
                        case 'ArrowDown':
                            if (row < 8) selectCell(row + 1, col);
                            break;
                        case 'ArrowLeft':
                            if (col > 0) selectCell(row, col - 1);
                            break;
                        case 'ArrowRight':
                            if (col < 8) selectCell(row, col + 1);
                            break;
                        case 'Backspace':
                        case 'Delete':
                            eraseCell();
                            break;
                        case 'n':
                            toggleNotesMode();
                            break;
                        case 'a':
                            toggleAutoNotes();
                            break;
                        case 'u':
                            undoMove();
                            break;
                        case 'h':
                            giveHint();
                            break;
                    }
                }
            }

            // Event listeners for number buttons
            document.querySelectorAll('#number-buttons .cell').forEach(btn => {
                btn.addEventListener('click', () => {
                    placeNumber(parseInt(btn.dataset.number));
                });
            });
        });
    </script>
</body>
</html>